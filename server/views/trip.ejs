<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/expense.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/create_group.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
  <link rel="stylesheet" href="/css/expense-box.css">
  <link rel="stylesheet" href="/css/media.css">
        
</head>

<style>
    #drop_zone {
        margin: auto;
        text-align: center;
        vertical-align: middle;
        font-size: 40px;
        border: 5px solid grey;
        border-radius: 15px;
        width: 40%;
        background: linear-gradient(to right, #FCECEB, #F5F6FA);
    }      
</style>

<div class="container">
  <section class="menu">
    <div class="logo">
      <button type="button" class="main nav"></button>
      <span>TravelPlanner</span>
    </div>
      
    <ul>
      <li>
        <a href="/">Home</a>
      </li>
      <li>
        <a href="/about">About</a>
      </li>
      <li>
        <a href="/profile" id="profile">Profile</a>
      </li>
      <li class="active">
        <a href="/createTrip">Trip</a>
      </li>
    </ul>
  </section>

  <section class="slide">
      <div class="desc" id="tripSummary">
        <h1 id="trip_name"></h1>
        <small id="dest_overview"></small>
      </div>
    </section>
    <div id="expenseDetails">
        <% splits.forEach(function(user) { %>
            <li><%= user %></li>
        <% }); %>
      </div>

  <label for="touch1"><span_groups>Media</span_groups></label>
  <br></br>

  <div class="row_images" id="image_row">
    <div class="column_images" id="image_col1"></div>
    <div class="column_images" id="image_col2"></div>
  </div>

  <br>
  <div class="button">
    <div id="drop_zone" ondrop="dropHandler(event);" ondragover="dragOverHandler(event);">
        <p>Drag one or more files to this <i>drop zone</i>.</p>
    </div>
  </div>
  <br></br>

  <label for="touch2"><span_groups>Your Expenses</span_groups></label>
  <!-- <input type="checkbox" id="touch2">  -->

  <ul class="slider2" id="expenses">
  </ul>

  <div id="dvTable" class="content-table"></div>


  <div class="button">
    <button id="create_group" class="create_group" onclick="createExpense()">Add an Expense</button>
  </div>
  <br>
        
    <div class="result" id="expense-box">Add an Expense
        <br></br>

        <form id="expense-form">
        <label for="fname">Expense Name:</label><br>
        <input type="text" id="expense_title" name="expense_title" value="ioawawueqoipr"><br>
        <br></br>

        <label for="fname">Amount:</label><br>
        <input type="number" step="any" id="amount" name="amount" value="987.98">
        
            <div class="expense-container">
                <div class="select-btn" id="paid_by">
                    
                    <span class="btn-textPaidBy">Paid By</span>
                    <span class="arrow-dwn">
                        <i class="fa-solid fa-chevron-down"></i>
                    </span>
                </div>
    
                <ul class="list-items" id="PaidByMembers">
                </ul>
            </div>
            <div class="expense-container">
                <div class="select-btn" id="paid_for">
                    
                    <span class="btn-textPaidFor">Paid For</span>
                    <span class="arrow-dwn">
                        <i class="fa-solid fa-chevron-down"></i>
                    </span>
                </div>
    
                <ul class="list-items" id="PaidForMembers">
                </ul>
            </div> 
            <div class="button">
                <button id="create_expense" class="create_expense" type="submit">Submit</button>
            </div>
        </form>
            <br></br>
            <div class="button">
                <button id="close_expense" class="close_expense" onclick="closeExpenseBox()">Close</button>
            </div>
            <br></br>
            </div>
        
    <script>

        populateCheckBoxes(".itemPaidBy", ".itemPaidFor",  "paid_by", "paid_for");

        let splits = <%- JSON.stringify(splits) %>
        console.log("splits", splits);

        let URL_GRAPHQL = '/graphql';

        window.onload = populatePage();

        async function getMemberName(member_id) {
            let get_member_names = {
                query: `query ($uid:ID!){
                    user (uid: $uid) {display_name}
                }`,
                variables: {
                    tid: member_id
                }
            }
            try {
                let response = await fetch(URL_GRAPHQL, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json'
                },
                body : JSON.stringify(get_member_names)
                })
                member_name = (await response.json()).data.user.display_name;
                console.log(member_name)                
            }
            catch (err) {
                console.log(err)
            }
        }

        async function populatePage() {
            let tripDetails;
            let getTripDetails = {
                query: `query ($tid:ID!) {
                    trip (tid: $tid) {
                        destination{name overview}
                        members {display_name image google_id}
                        media
                        expenses {title amount paid_by{display_name} included_members{display_name}}
                    }
                    }`,
                variables: {
                    tid: "<%= tid %>"
                }
            }

            let expenseDetails = document.getElementById('expenseDetails')
            // let splits = <%= splits%>
            
            // expenseDetails.innerHTML = JSON.parse("<%= splits %>")

            try {
                let response = await fetch(URL_GRAPHQL, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json'
                },
                body : JSON.stringify(getTripDetails)
                })
                tripDetails = (await response.json()).data.trip;
            }
            catch (err) {
                console.log(err)
            }

            let member_names = []

            

            // Populate trip summary
            populateTripSummary(tripDetails.destination.name, tripDetails.destination.overview);
            
            // Populate Media
            populateMedia(tripDetails.media);
            
            // Populate Expense Table
            GenerateExpenseTable(tripDetails.expenses);
            
            // Populate Paid by dropdown
            populateDropdownPaidBy(tripDetails.members);
            
            // Populate paid for dropdown
            populateDropdownPaidFor(tripDetails.members);
            
            // Populate Profile info
            populateProfileInfo(tripDetails.members);

            //for (const split of splits) {
              //  getMemberName(split[0])
                //getMemberName(split[1])
            //}
        }

        function populateTripSummary(trip_name, dest_overview) {
            var trip_location = document.getElementById("trip_name");
            var overview_text = document.getElementById("dest_overview");
            trip_location.innerHTML = trip_name;
            overview_text.innerHTML = dest_overview
        }

        function populateExpenses(expenses) {
            var ul = document.getElementById("expenses");
            for (const x of expenses) {
                console.log(x);
                let expenseDetails = `${x.title} ${x.amount} ${x.paid_by.display_name}` 
                var li = document.createElement("li");
                var div = document.createElement("div");
                var a = document.createElement("a");
                a.appendChild(document.createTextNode(expenseDetails));
                // a.appendChild(document.createTextNode(x.title));

                div.appendChild(a);
                li.appendChild(div);
                ul.appendChild(li);
            }
        }

        // function populateExpenseDetails(expense_list) {
        //     for(const exp of expense_list) {
        //         let expenseDetailsElement = document.getElementById("expenseDetails");
        //         let exp_name = document.createElement("small");
        //         expenseDetailsElement.appendChild(exp_name);
        //         exp_name.innerHTML = exp
        //     }
        // }


        function populateMedia(media) {
            var colImg1 = document.getElementById("image_col1");
            var colImg2 = document.getElementById("image_col2");
            for (let i = 0; i < Math.min(8, media.length); i++) {
                var image = document.createElement("img");
                if (i <= 3) {
                    image.src = media[i];
                    colImg1.appendChild(image);
                }
                else {
                    image.src = media[i];
                    colImg2.appendChild(image);
                }

            }
        }

        function populateProfileInfo(members) {
            for (const member_info of members){
                var slide_ele = document.getElementById("tripSummary");
                var profile_img = document.createElement("img");
                profile_img.src = member_info.image;
                profile_img.setAttribute("referrerpolicy", "no-referrer")
                slide_ele.appendChild(profile_img);
            }
            
        }


        function populateDropdownPaidBy(members) {
            var list_members = document.getElementById("PaidByMembers");
            for (const [i, m] of members.entries()) {
                var li = document.createElement("li");
                var inp = document.createElement("input");
                var label = document.createElement("label");
                inp.type = "radio";
                inp.name = "paid_by";
                inp.value = m.google_id;
                inp.id = `paid_by_${i}`;
                label.for = `paid_by_${i}`;
                label.innerHTML = m.display_name;
                li.appendChild(inp);
                li.appendChild(label);
                list_members.appendChild(li);
                li.classList.add("itemPaidBy")
            }           
        }

        function populateDropdownPaidFor(members) {
            var list_members = document.getElementById("PaidForMembers");
            for (const [i, m] of members.entries()) {
                var li = document.createElement("li");
                var inp = document.createElement("input");
                var label = document.createElement("label");
                inp.type = "checkbox";
                inp.name = "paid_for";
                inp.value = m.google_id;
                inp.id = `paid_for_${i}`;
                label.for = `paid_for_${i}`;
                label.innerHTML = m.display_name;
                li.appendChild(inp);
                li.appendChild(label);
                list_members.appendChild(li);
                li.classList.add("itemPaidFor")
            }
        }


        function GenerateExpenseTable(expenses){
            var expense_details = new Array();
            for (const x of expenses) {
                expense_details.push(x);
            }

            console.log(expenses);
    
            var table = document.createElement("TABLE");
            <!-- table.border = "0"; -->
    
            var columnCount = expense_details[0].length;
    
            var header = table.createTHead();
            var row  = header.insertRow(-1)
            var expense_title = row.insertCell(-1);
            var amount = row.insertCell(-1);
            var paid_by = row.insertCell(-1);
            var included_members = row.insertCell(-1);
            
            expense_title.innerHTML = "Title"
            amount.innerHTML = "Amount"
            paid_by.innerHTML = "Paid By"
            included_members.innerHTML = "Paid For"
    
        
            for (var i = 0; i < expense_details.length; i++) {
                row = table.insertRow(-1);
                var expense_title = row.insertCell(-1);
                var amount = row.insertCell(-1);
                var paid_by = row.insertCell(-1);
                var included_members = row.insertCell(-1);

                expense_title.innerHTML = expense_details[i].title
                amount.innerHTML = expense_details[i].amount
                paid_by.innerHTML = expense_details[i].paid_by.display_name
                included_members.innerHTML = expense_details[i].included_members.map(x => x.display_name)
            }
            table.classList.add("content-table")
            var dvTable = document.getElementById("dvTable");
            dvTable.style.margin = "auto"
            dvTable.innerHTML = "";
            dvTable.appendChild(table);
        }


        // Close expense box at first
        document.getElementById("expense-box").style.display = "none";

        function populateCheckBoxes(item_paidBy, item_paidFor, paid_by_id, paid_for_id){
            const selectBtnPaidBy = document.getElementById(paid_by_id),
            selectBtnPaidFor = document.getElementById(paid_for_id),
            itemsPaidBy = document.querySelectorAll(item_paidBy);
            itemsPaidFor = document.querySelectorAll(item_paidFor);

            selectBtnPaidBy.addEventListener("click", () => {
                selectBtnPaidBy.classList.toggle("open");
            });

            selectBtnPaidFor.addEventListener("click", () => {
                selectBtnPaidFor.classList.toggle("open");
            });

            itemsPaidBy.forEach(item => {
                item.addEventListener("click", () => {
                    console.log(item);
                    item.classList.toggle("checked");

                    let checked = document.querySelectorAll(".checked"),
                        btnTextPaidBy = document.querySelector(".btn-textPaidBy");

                        if(checked && checked.length > 0){
                            btnTextPaidBy.innerText = `${checked.length} Selected`;
                        }else{
                            btnTextPaidBy.innerText = "Paid By";
                        }
                });
            })

            itemsPaidFor.forEach(item => {
                item.addEventListener("click", () => {
                    console.log(item);
                    item.classList.toggle("checked");

                    let checked = document.querySelectorAll(".checked"),
                        btnTextPaidFor = document.querySelector(".btn-textPaidFor");

                        if(checked && checked.length > 0){
                            btnTextPaidFor.innerText = `${checked.length} Selected`;
                        }else{
                            btnTextPaidFor.innerText = "Paid For";
                        }
                });
            })
        }

        function createExpense() {
            document.getElementById("expense-box").style.display = "block";
            document.getElementById("expense-box").style.margin = "auto";
        }

        function closeExpenseBox() {
            document.getElementById("expense-box").style.display = "none";
        }

        async function dropHandler(ev) {
            console.log('File(s) dropped');
          
            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();
          
            if (ev.dataTransfer.items) {
              // Use DataTransferItemList interface to access the file(s)
              [...ev.dataTransfer.items].forEach((item, i) => {
                // If dropped items aren't files, reject them
                if (item.kind === 'file') {
                  const file = item.getAsFile();
                  console.log(`… file[${i}].name = ${file.name}`);
                  uploadFile(file)
                }
              });
              alert("Files uploaded!")
              await new Promise(r => setTimeout(r, 5000));
              location.reload(true)
            } else {
              // Use DataTransfer interface to access the file(s)
              [...ev.dataTransfer.files].forEach((file, i) => {
                console.log(`… file[${i}].name = ${file.name}`);
              });
            }
        }

        function dragOverHandler(event) {
            event.preventDefault();

        }

        async function postRequestGraphql(URL_GRAPHQL, query_data) {
            try {
                let response = await fetch(URL_GRAPHQL, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json'
                    },
                    body : JSON.stringify(query_data)
                })
                let response_json = await response.json()
                return response_json
            }
            catch (err) {
                console.log(err)
            }
        }

        function uploadFile(file) {
            let tid = "<%= tid %>"
            let url = `/trip/upload/${tid}`
            let formData = new FormData()
            console.log(file)
            formData.append('media', file)
          
            fetch(url, {
              method: 'POST',
              body: formData
            })
            .then(() => { /* Done. Inform the user */ })
            .catch(() => { /* Error. Inform the user */ })
        }

        let form = document.getElementById("expense-form")

        form.addEventListener(
            "submit",
            async (event) => {
                event.preventDefault()
                const data = new FormData(form);
                data.forEach((val, key) => {console.log(key, typeof(val))})
                console.log(data.entries())
                const json_data = Object.fromEntries(data.entries())
                const included_members = data.getAll('paid_for')
                console.log(json_data)

                let addExpense = {
                    query: `mutation ($tid: ID! $title: String! $amount: Float! $paid_by: String! $included_members: [String]!){
                        addExpense (expense_input: {
                          trip_id: $tid,
                          title: $title,
                          amount: $amount,
                          paid_by: $paid_by,
                          included_members: $included_members
                        }){title}
                      }`,
                    variables: {
                        tid: "<%= tid %>",
                        title: json_data.expense_title,
                        amount: parseFloat(json_data.amount),
                        paid_by: json_data.paid_by,
                        included_members: included_members,
                    }
                }
                console.log(addExpense)
                
                let response = await postRequestGraphql(URL_GRAPHQL, addExpense)
                location.reload()
            }
        )
        
    </script>
</html>